---
import { IMAGES_PATH } from '@/services/consts/const-imagesPath'
import ArrowLeft from '@/assets/svg/ArrowLeft.svg'
import ArrowRight from '@/assets/svg/ArrowRight.svg'

const { similars } = Astro.props
---

<article class="relative mt-20 mb-48 flex w-full flex-col items-center gap-4 md:mb-[20rem]">
  <h4 class="mb-10 text-center text-3xl font-bold text-white md:text-5xl">Películas similares</h4>
  <div class="container-arrows flex items-center gap-6">
    <button class="button-left z-30"
      ><ArrowLeft
        class="arrow-left cursor-pointer text-gray-600 transition-all hover:scale-105 hover:text-gray-500"
        aria-label="Flecha hacia la izquierda"
      /></button
    >
    <button class="button-right z-30"
      ><ArrowRight
        class="arrow-right cursor-pointer text-gray-600 transition-all hover:scale-105 hover:text-gray-500"
        aria-label="Flecha hacia la derecha"
      /></button
    >
  </div>
  <section
    class="similar-movies absolute inset-0 mt-30 flex h-90 w-full snap-mandatory gap-6 overflow-x-scroll overflow-y-hidden p-4 md:mt-40"
  >
    {
      similars.results.map((similar) => {
        return (
          <div class="animate-fade-in relative mt-4 flex aspect-video h-auto w-full flex-col justify-center gap-2 md:mt-0 md:w-[30rem] md:min-w-[30rem]">
            <img
              src={`${IMAGES_PATH}${similar.backdrop_path}`}
              alt={similar.title}
              class="animate-fade-in animate-delay-200 aspect-video min-w-full rounded-md object-center transition-all hover:scale-105"
              loading="lazy"
              fetchpriority="low"
              decoding="async"
            />
            <div>
              <span class="text-shadow mb-0.5 block max-w-full truncate text-base text-nowrap text-white md:text-xl lg:font-bold">
                {similar.title}
              </span>
            </div>
          </div>
        )
      })
    }
  </section>
</article>

<style>
  @media (min-width: 768px) {
    .similar-movies::-webkit-scrollbar {
      appearance: none;
    }
    .similar-movies::-webkit-scrollbar:horizontal {
      height: 9px;
    }
    .similar-movies::-webkit-scrollbar:vertical {
      width: 4px;
    }
    .similar-movies::-webkit-scrollbar-thumb {
      background-color: #4b5563;
      border-radius: 20px;
    }
    .similar-movies::-webkit-scrollbar-track {
      background-color: #1f2937;
      border-radius: 10px;
    }
    .similar-movies::-webkit-scrollbar-button:increment,
    .similar-movies::-webkit-scrollbar-button {
      display: none;
    }
  }

  .similar-movies::-webkit-scrollbar {
    appearance: none;
  }
</style>

<script is:inline>
  const containerMovies = document.querySelector('.similar-movies') // Contenedor de películas similares
  const arrowLeft = document.querySelector('.arrow-left') // Flecha izquierda
  const arrowRight = document.querySelector('.arrow-right') // Flecha derecha
  const buttonLeft = document.querySelector('.button-left') // Botón flecha izquierda
  const buttonRight = document.querySelector('.button-right') // Botón flecha derecha
  const link = document.querySelector('.link') // Enlace de ver más

  link.addEventListener('click', (e) => {
    e.preventDefault()

    window.history.pushState({}, '', `/${e.target.value}`)
  })

  arrowRight.addEventListener('click', () => {
    const scrollAmount = (containerMovies.scrollWidth / containerMovies.children.length) * 2.8
    containerMovies.scrollBy({
      left: scrollAmount,
      behavior: 'smooth'
    })
  })

  arrowLeft.addEventListener('click', () => {
    const scrollAmount = (containerMovies.scrollWidth / containerMovies.children.length) * 2.8
    containerMovies.scrollBy({
      left: -scrollAmount,
      behavior: 'smooth'
    })
  })

  // Accecibilidad de flechas
  buttonLeft.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ' || e.key === 'ArrowLeft') {
      const scrollAmount = (containerMovies.scrollWidth / containerMovies.children.length) * 2.8
      containerMovies.scrollBy({
        left: -scrollAmount,
        behavior: 'smooth'
      })
    }
  })

  buttonRight.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ' || e.key === 'ArrowRight') {
      const scrollAmount = (containerMovies.scrollWidth / containerMovies.children.length) * 2.8
      containerMovies.scrollBy({
        left: scrollAmount,
        behavior: 'smooth'
      })
    }
  })
</script>
